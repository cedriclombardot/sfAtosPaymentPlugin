<?php

/**
 * Base class that represents a row from the 'sf_atos_cart' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 03/26/09 18:38:56
 *
 * @package    plugins.sfAtosPaymentPlugin.lib.model.om
 */
abstract class BasesfAtosCart extends BaseObject  implements Persistent {


  const PEER = 'sfAtosCartPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        sfAtosCartPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the amount field.
	 * @var        int
	 */
	protected $amount;

	/**
	 * The value for the merchant_id field.
	 * @var        int
	 */
	protected $merchant_id;

	/**
	 * The value for the merchant_language field.
	 * @var        string
	 */
	protected $merchant_language;

	/**
	 * The value for the merchant_country field.
	 * @var        string
	 */
	protected $merchant_country;

	/**
	 * The value for the transaction_id field.
	 * @var        int
	 */
	protected $transaction_id;

	/**
	 * The value for the payment_means field.
	 * @var        string
	 */
	protected $payment_means;

	/**
	 * The value for the transmission_date field.
	 * @var        string
	 */
	protected $transmission_date;

	/**
	 * The value for the payment_time field.
	 * @var        string
	 */
	protected $payment_time;

	/**
	 * The value for the response_code field.
	 * @var        string
	 */
	protected $response_code;

	/**
	 * The value for the payment_certificate field.
	 * @var        string
	 */
	protected $payment_certificate;

	/**
	 * The value for the authorisation_id field.
	 * @var        string
	 */
	protected $authorisation_id;

	/**
	 * The value for the currency_code field.
	 * @var        int
	 */
	protected $currency_code;

	/**
	 * The value for the card_number field.
	 * @var        string
	 */
	protected $card_number;

	/**
	 * The value for the cvv_flag field.
	 * @var        int
	 */
	protected $cvv_flag;

	/**
	 * The value for the cvv_response_code field.
	 * @var        string
	 */
	protected $cvv_response_code;

	/**
	 * The value for the bank_response_code field.
	 * @var        string
	 */
	protected $bank_response_code;

	/**
	 * The value for the complementary_code field.
	 * @var        int
	 */
	protected $complementary_code;

	/**
	 * The value for the complementary_info field.
	 * @var        string
	 */
	protected $complementary_info;

	/**
	 * The value for the return_context field.
	 * @var        string
	 */
	protected $return_context;

	/**
	 * The value for the caddie field.
	 * @var        string
	 */
	protected $caddie;

	/**
	 * The value for the language field.
	 * @var        string
	 */
	protected $language;

	/**
	 * The value for the customer_id field.
	 * @var        string
	 */
	protected $customer_id;

	/**
	 * The value for the order_id field.
	 * @var        string
	 */
	protected $order_id;

	/**
	 * The value for the customer_email field.
	 * @var        string
	 */
	protected $customer_email;

	/**
	 * The value for the customer_ip_address field.
	 * @var        string
	 */
	protected $customer_ip_address;

	/**
	 * The value for the capture_day field.
	 * @var        int
	 */
	protected $capture_day;

	/**
	 * The value for the capture_mode field.
	 * @var        string
	 */
	protected $capture_mode;

	/**
	 * The value for the data field.
	 * @var        resource
	 */
	protected $data;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasesfAtosCart object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [amount] column value.
	 * 
	 * @return     int
	 */
	public function getAmount()
	{
		return $this->amount;
	}

	/**
	 * Get the [merchant_id] column value.
	 * 
	 * @return     int
	 */
	public function getMerchantId()
	{
		return $this->merchant_id;
	}

	/**
	 * Get the [merchant_language] column value.
	 * 
	 * @return     string
	 */
	public function getMerchantLanguage()
	{
		return $this->merchant_language;
	}

	/**
	 * Get the [merchant_country] column value.
	 * 
	 * @return     string
	 */
	public function getMerchantCountry()
	{
		return $this->merchant_country;
	}

	/**
	 * Get the [transaction_id] column value.
	 * 
	 * @return     int
	 */
	public function getTransactionId()
	{
		return $this->transaction_id;
	}

	/**
	 * Get the [payment_means] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentMeans()
	{
		return $this->payment_means;
	}

	/**
	 * Get the [optionally formatted] temporal [transmission_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTransmissionDate($format = 'Y-m-d H:i:s')
	{
		if ($this->transmission_date === null) {
			return null;
		}


		if ($this->transmission_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->transmission_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->transmission_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [payment_time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPaymentTime($format = 'Y-m-d H:i:s')
	{
		if ($this->payment_time === null) {
			return null;
		}


		if ($this->payment_time === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->payment_time);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->payment_time, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [response_code] column value.
	 * 
	 * @return     string
	 */
	public function getResponseCode()
	{
		return $this->response_code;
	}

	/**
	 * Get the [payment_certificate] column value.
	 * 
	 * @return     string
	 */
	public function getPaymentCertificate()
	{
		return $this->payment_certificate;
	}

	/**
	 * Get the [authorisation_id] column value.
	 * 
	 * @return     string
	 */
	public function getAuthorisationId()
	{
		return $this->authorisation_id;
	}

	/**
	 * Get the [currency_code] column value.
	 * 
	 * @return     int
	 */
	public function getCurrencyCode()
	{
		return $this->currency_code;
	}

	/**
	 * Get the [card_number] column value.
	 * 
	 * @return     string
	 */
	public function getCardNumber()
	{
		return $this->card_number;
	}

	/**
	 * Get the [cvv_flag] column value.
	 * 
	 * @return     int
	 */
	public function getCvvFlag()
	{
		return $this->cvv_flag;
	}

	/**
	 * Get the [cvv_response_code] column value.
	 * 
	 * @return     string
	 */
	public function getCvvResponseCode()
	{
		return $this->cvv_response_code;
	}

	/**
	 * Get the [bank_response_code] column value.
	 * 
	 * @return     string
	 */
	public function getBankResponseCode()
	{
		return $this->bank_response_code;
	}

	/**
	 * Get the [complementary_code] column value.
	 * 
	 * @return     int
	 */
	public function getComplementaryCode()
	{
		return $this->complementary_code;
	}

	/**
	 * Get the [complementary_info] column value.
	 * 
	 * @return     string
	 */
	public function getComplementaryInfo()
	{
		return $this->complementary_info;
	}

	/**
	 * Get the [return_context] column value.
	 * 
	 * @return     string
	 */
	public function getReturnContext()
	{
		return $this->return_context;
	}

	/**
	 * Get the [caddie] column value.
	 * 
	 * @return     string
	 */
	public function getCaddie()
	{
		return $this->caddie;
	}

	/**
	 * Get the [language] column value.
	 * 
	 * @return     string
	 */
	public function getLanguage()
	{
		return $this->language;
	}

	/**
	 * Get the [customer_id] column value.
	 * 
	 * @return     string
	 */
	public function getCustomerId()
	{
		return $this->customer_id;
	}

	/**
	 * Get the [order_id] column value.
	 * 
	 * @return     string
	 */
	public function getOrderId()
	{
		return $this->order_id;
	}

	/**
	 * Get the [customer_email] column value.
	 * 
	 * @return     string
	 */
	public function getCustomerEmail()
	{
		return $this->customer_email;
	}

	/**
	 * Get the [customer_ip_address] column value.
	 * 
	 * @return     string
	 */
	public function getCustomerIpAddress()
	{
		return $this->customer_ip_address;
	}

	/**
	 * Get the [capture_day] column value.
	 * 
	 * @return     int
	 */
	public function getCaptureDay()
	{
		return $this->capture_day;
	}

	/**
	 * Get the [capture_mode] column value.
	 * 
	 * @return     string
	 */
	public function getCaptureMode()
	{
		return $this->capture_mode;
	}

	/**
	 * Get the [data] column value.
	 * 
	 * @return     resource
	 */
	public function getData()
	{
		return $this->data;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [amount] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setAmount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->amount !== $v) {
			$this->amount = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::AMOUNT;
		}

		return $this;
	} // setAmount()

	/**
	 * Set the value of [merchant_id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setMerchantId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->merchant_id !== $v) {
			$this->merchant_id = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::MERCHANT_ID;
		}

		return $this;
	} // setMerchantId()

	/**
	 * Set the value of [merchant_language] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setMerchantLanguage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->merchant_language !== $v) {
			$this->merchant_language = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::MERCHANT_LANGUAGE;
		}

		return $this;
	} // setMerchantLanguage()

	/**
	 * Set the value of [merchant_country] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setMerchantCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->merchant_country !== $v) {
			$this->merchant_country = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::MERCHANT_COUNTRY;
		}

		return $this;
	} // setMerchantCountry()

	/**
	 * Set the value of [transaction_id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setTransactionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->transaction_id !== $v) {
			$this->transaction_id = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::TRANSACTION_ID;
		}

		return $this;
	} // setTransactionId()

	/**
	 * Set the value of [payment_means] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setPaymentMeans($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_means !== $v) {
			$this->payment_means = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::PAYMENT_MEANS;
		}

		return $this;
	} // setPaymentMeans()

	/**
	 * Sets the value of [transmission_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setTransmissionDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->transmission_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->transmission_date !== null && $tmpDt = new DateTime($this->transmission_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->transmission_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfAtosCartPeer::TRANSMISSION_DATE;
			}
		} // if either are not null

		return $this;
	} // setTransmissionDate()

	/**
	 * Sets the value of [payment_time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setPaymentTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->payment_time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->payment_time !== null && $tmpDt = new DateTime($this->payment_time)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->payment_time = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfAtosCartPeer::PAYMENT_TIME;
			}
		} // if either are not null

		return $this;
	} // setPaymentTime()

	/**
	 * Set the value of [response_code] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setResponseCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->response_code !== $v) {
			$this->response_code = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::RESPONSE_CODE;
		}

		return $this;
	} // setResponseCode()

	/**
	 * Set the value of [payment_certificate] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setPaymentCertificate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->payment_certificate !== $v) {
			$this->payment_certificate = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::PAYMENT_CERTIFICATE;
		}

		return $this;
	} // setPaymentCertificate()

	/**
	 * Set the value of [authorisation_id] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setAuthorisationId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->authorisation_id !== $v) {
			$this->authorisation_id = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::AUTHORISATION_ID;
		}

		return $this;
	} // setAuthorisationId()

	/**
	 * Set the value of [currency_code] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCurrencyCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->currency_code !== $v) {
			$this->currency_code = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CURRENCY_CODE;
		}

		return $this;
	} // setCurrencyCode()

	/**
	 * Set the value of [card_number] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCardNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->card_number !== $v) {
			$this->card_number = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CARD_NUMBER;
		}

		return $this;
	} // setCardNumber()

	/**
	 * Set the value of [cvv_flag] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCvvFlag($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cvv_flag !== $v) {
			$this->cvv_flag = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CVV_FLAG;
		}

		return $this;
	} // setCvvFlag()

	/**
	 * Set the value of [cvv_response_code] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCvvResponseCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cvv_response_code !== $v) {
			$this->cvv_response_code = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CVV_RESPONSE_CODE;
		}

		return $this;
	} // setCvvResponseCode()

	/**
	 * Set the value of [bank_response_code] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setBankResponseCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bank_response_code !== $v) {
			$this->bank_response_code = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::BANK_RESPONSE_CODE;
		}

		return $this;
	} // setBankResponseCode()

	/**
	 * Set the value of [complementary_code] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setComplementaryCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->complementary_code !== $v) {
			$this->complementary_code = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::COMPLEMENTARY_CODE;
		}

		return $this;
	} // setComplementaryCode()

	/**
	 * Set the value of [complementary_info] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setComplementaryInfo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->complementary_info !== $v) {
			$this->complementary_info = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::COMPLEMENTARY_INFO;
		}

		return $this;
	} // setComplementaryInfo()

	/**
	 * Set the value of [return_context] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setReturnContext($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->return_context !== $v) {
			$this->return_context = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::RETURN_CONTEXT;
		}

		return $this;
	} // setReturnContext()

	/**
	 * Set the value of [caddie] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCaddie($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->caddie !== $v) {
			$this->caddie = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CADDIE;
		}

		return $this;
	} // setCaddie()

	/**
	 * Set the value of [language] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setLanguage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->language !== $v) {
			$this->language = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::LANGUAGE;
		}

		return $this;
	} // setLanguage()

	/**
	 * Set the value of [customer_id] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCustomerId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->customer_id !== $v) {
			$this->customer_id = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CUSTOMER_ID;
		}

		return $this;
	} // setCustomerId()

	/**
	 * Set the value of [order_id] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setOrderId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->order_id !== $v) {
			$this->order_id = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::ORDER_ID;
		}

		return $this;
	} // setOrderId()

	/**
	 * Set the value of [customer_email] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCustomerEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->customer_email !== $v) {
			$this->customer_email = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CUSTOMER_EMAIL;
		}

		return $this;
	} // setCustomerEmail()

	/**
	 * Set the value of [customer_ip_address] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCustomerIpAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->customer_ip_address !== $v) {
			$this->customer_ip_address = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CUSTOMER_IP_ADDRESS;
		}

		return $this;
	} // setCustomerIpAddress()

	/**
	 * Set the value of [capture_day] column.
	 * 
	 * @param      int $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCaptureDay($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->capture_day !== $v) {
			$this->capture_day = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CAPTURE_DAY;
		}

		return $this;
	} // setCaptureDay()

	/**
	 * Set the value of [capture_mode] column.
	 * 
	 * @param      string $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setCaptureMode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->capture_mode !== $v) {
			$this->capture_mode = $v;
			$this->modifiedColumns[] = sfAtosCartPeer::CAPTURE_MODE;
		}

		return $this;
	} // setCaptureMode()

	/**
	 * Set the value of [data] column.
	 * 
	 * @param      resource $v new value
	 * @return     sfAtosCart The current object (for fluent API support)
	 */
	public function setData($v)
	{
		// Because BLOB columns are streams in PDO we have to assume that they are
		// always modified when a new value is passed in.  For example, the contents
		// of the stream itself may have changed externally.
		if (!is_resource($v)) {
			$this->data = fopen('php://memory', 'r+');
			fwrite($this->data, $v);
			rewind($this->data);
		} else { // it's already a stream
			$this->data = $v;
		}
		$this->modifiedColumns[] = sfAtosCartPeer::DATA;

		return $this;
	} // setData()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->amount = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->merchant_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->merchant_language = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->merchant_country = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->transaction_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->payment_means = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->transmission_date = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->payment_time = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->response_code = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->payment_certificate = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->authorisation_id = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->currency_code = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->card_number = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->cvv_flag = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->cvv_response_code = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->bank_response_code = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->complementary_code = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->complementary_info = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->return_context = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->caddie = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->language = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->customer_id = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->order_id = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->customer_email = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->customer_ip_address = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->capture_day = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->capture_mode = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			if ($row[$startcol + 28] !== null) {
				$this->data = fopen('php://memory', 'r+');
				fwrite($this->data, $row[$startcol + 28]);
				rewind($this->data);
			} else {
				$this->data = null;
			}
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 29; // 29 = sfAtosCartPeer::NUM_COLUMNS - sfAtosCartPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating sfAtosCart object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfAtosCartPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = sfAtosCartPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasesfAtosCart:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfAtosCartPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			sfAtosCartPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasesfAtosCart:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasesfAtosCart:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfAtosCartPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasesfAtosCart:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			sfAtosCartPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = sfAtosCartPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = sfAtosCartPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += sfAtosCartPeer::doUpdate($this, $con);
				}

				// Rewind the data LOB column, since PDO does not rewind after inserting value.
				if ($this->data !== null && is_resource($this->data)) {
					rewind($this->data);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = sfAtosCartPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfAtosCartPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAmount();
				break;
			case 2:
				return $this->getMerchantId();
				break;
			case 3:
				return $this->getMerchantLanguage();
				break;
			case 4:
				return $this->getMerchantCountry();
				break;
			case 5:
				return $this->getTransactionId();
				break;
			case 6:
				return $this->getPaymentMeans();
				break;
			case 7:
				return $this->getTransmissionDate();
				break;
			case 8:
				return $this->getPaymentTime();
				break;
			case 9:
				return $this->getResponseCode();
				break;
			case 10:
				return $this->getPaymentCertificate();
				break;
			case 11:
				return $this->getAuthorisationId();
				break;
			case 12:
				return $this->getCurrencyCode();
				break;
			case 13:
				return $this->getCardNumber();
				break;
			case 14:
				return $this->getCvvFlag();
				break;
			case 15:
				return $this->getCvvResponseCode();
				break;
			case 16:
				return $this->getBankResponseCode();
				break;
			case 17:
				return $this->getComplementaryCode();
				break;
			case 18:
				return $this->getComplementaryInfo();
				break;
			case 19:
				return $this->getReturnContext();
				break;
			case 20:
				return $this->getCaddie();
				break;
			case 21:
				return $this->getLanguage();
				break;
			case 22:
				return $this->getCustomerId();
				break;
			case 23:
				return $this->getOrderId();
				break;
			case 24:
				return $this->getCustomerEmail();
				break;
			case 25:
				return $this->getCustomerIpAddress();
				break;
			case 26:
				return $this->getCaptureDay();
				break;
			case 27:
				return $this->getCaptureMode();
				break;
			case 28:
				return $this->getData();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = sfAtosCartPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAmount(),
			$keys[2] => $this->getMerchantId(),
			$keys[3] => $this->getMerchantLanguage(),
			$keys[4] => $this->getMerchantCountry(),
			$keys[5] => $this->getTransactionId(),
			$keys[6] => $this->getPaymentMeans(),
			$keys[7] => $this->getTransmissionDate(),
			$keys[8] => $this->getPaymentTime(),
			$keys[9] => $this->getResponseCode(),
			$keys[10] => $this->getPaymentCertificate(),
			$keys[11] => $this->getAuthorisationId(),
			$keys[12] => $this->getCurrencyCode(),
			$keys[13] => $this->getCardNumber(),
			$keys[14] => $this->getCvvFlag(),
			$keys[15] => $this->getCvvResponseCode(),
			$keys[16] => $this->getBankResponseCode(),
			$keys[17] => $this->getComplementaryCode(),
			$keys[18] => $this->getComplementaryInfo(),
			$keys[19] => $this->getReturnContext(),
			$keys[20] => $this->getCaddie(),
			$keys[21] => $this->getLanguage(),
			$keys[22] => $this->getCustomerId(),
			$keys[23] => $this->getOrderId(),
			$keys[24] => $this->getCustomerEmail(),
			$keys[25] => $this->getCustomerIpAddress(),
			$keys[26] => $this->getCaptureDay(),
			$keys[27] => $this->getCaptureMode(),
			$keys[28] => $this->getData(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfAtosCartPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAmount($value);
				break;
			case 2:
				$this->setMerchantId($value);
				break;
			case 3:
				$this->setMerchantLanguage($value);
				break;
			case 4:
				$this->setMerchantCountry($value);
				break;
			case 5:
				$this->setTransactionId($value);
				break;
			case 6:
				$this->setPaymentMeans($value);
				break;
			case 7:
				$this->setTransmissionDate($value);
				break;
			case 8:
				$this->setPaymentTime($value);
				break;
			case 9:
				$this->setResponseCode($value);
				break;
			case 10:
				$this->setPaymentCertificate($value);
				break;
			case 11:
				$this->setAuthorisationId($value);
				break;
			case 12:
				$this->setCurrencyCode($value);
				break;
			case 13:
				$this->setCardNumber($value);
				break;
			case 14:
				$this->setCvvFlag($value);
				break;
			case 15:
				$this->setCvvResponseCode($value);
				break;
			case 16:
				$this->setBankResponseCode($value);
				break;
			case 17:
				$this->setComplementaryCode($value);
				break;
			case 18:
				$this->setComplementaryInfo($value);
				break;
			case 19:
				$this->setReturnContext($value);
				break;
			case 20:
				$this->setCaddie($value);
				break;
			case 21:
				$this->setLanguage($value);
				break;
			case 22:
				$this->setCustomerId($value);
				break;
			case 23:
				$this->setOrderId($value);
				break;
			case 24:
				$this->setCustomerEmail($value);
				break;
			case 25:
				$this->setCustomerIpAddress($value);
				break;
			case 26:
				$this->setCaptureDay($value);
				break;
			case 27:
				$this->setCaptureMode($value);
				break;
			case 28:
				$this->setData($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = sfAtosCartPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAmount($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setMerchantId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMerchantLanguage($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setMerchantCountry($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTransactionId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPaymentMeans($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTransmissionDate($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPaymentTime($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setResponseCode($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPaymentCertificate($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAuthorisationId($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCurrencyCode($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCardNumber($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCvvFlag($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCvvResponseCode($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setBankResponseCode($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setComplementaryCode($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setComplementaryInfo($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setReturnContext($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCaddie($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setLanguage($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCustomerId($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setOrderId($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCustomerEmail($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setCustomerIpAddress($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCaptureDay($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCaptureMode($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setData($arr[$keys[28]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(sfAtosCartPeer::DATABASE_NAME);

		if ($this->isColumnModified(sfAtosCartPeer::ID)) $criteria->add(sfAtosCartPeer::ID, $this->id);
		if ($this->isColumnModified(sfAtosCartPeer::AMOUNT)) $criteria->add(sfAtosCartPeer::AMOUNT, $this->amount);
		if ($this->isColumnModified(sfAtosCartPeer::MERCHANT_ID)) $criteria->add(sfAtosCartPeer::MERCHANT_ID, $this->merchant_id);
		if ($this->isColumnModified(sfAtosCartPeer::MERCHANT_LANGUAGE)) $criteria->add(sfAtosCartPeer::MERCHANT_LANGUAGE, $this->merchant_language);
		if ($this->isColumnModified(sfAtosCartPeer::MERCHANT_COUNTRY)) $criteria->add(sfAtosCartPeer::MERCHANT_COUNTRY, $this->merchant_country);
		if ($this->isColumnModified(sfAtosCartPeer::TRANSACTION_ID)) $criteria->add(sfAtosCartPeer::TRANSACTION_ID, $this->transaction_id);
		if ($this->isColumnModified(sfAtosCartPeer::PAYMENT_MEANS)) $criteria->add(sfAtosCartPeer::PAYMENT_MEANS, $this->payment_means);
		if ($this->isColumnModified(sfAtosCartPeer::TRANSMISSION_DATE)) $criteria->add(sfAtosCartPeer::TRANSMISSION_DATE, $this->transmission_date);
		if ($this->isColumnModified(sfAtosCartPeer::PAYMENT_TIME)) $criteria->add(sfAtosCartPeer::PAYMENT_TIME, $this->payment_time);
		if ($this->isColumnModified(sfAtosCartPeer::RESPONSE_CODE)) $criteria->add(sfAtosCartPeer::RESPONSE_CODE, $this->response_code);
		if ($this->isColumnModified(sfAtosCartPeer::PAYMENT_CERTIFICATE)) $criteria->add(sfAtosCartPeer::PAYMENT_CERTIFICATE, $this->payment_certificate);
		if ($this->isColumnModified(sfAtosCartPeer::AUTHORISATION_ID)) $criteria->add(sfAtosCartPeer::AUTHORISATION_ID, $this->authorisation_id);
		if ($this->isColumnModified(sfAtosCartPeer::CURRENCY_CODE)) $criteria->add(sfAtosCartPeer::CURRENCY_CODE, $this->currency_code);
		if ($this->isColumnModified(sfAtosCartPeer::CARD_NUMBER)) $criteria->add(sfAtosCartPeer::CARD_NUMBER, $this->card_number);
		if ($this->isColumnModified(sfAtosCartPeer::CVV_FLAG)) $criteria->add(sfAtosCartPeer::CVV_FLAG, $this->cvv_flag);
		if ($this->isColumnModified(sfAtosCartPeer::CVV_RESPONSE_CODE)) $criteria->add(sfAtosCartPeer::CVV_RESPONSE_CODE, $this->cvv_response_code);
		if ($this->isColumnModified(sfAtosCartPeer::BANK_RESPONSE_CODE)) $criteria->add(sfAtosCartPeer::BANK_RESPONSE_CODE, $this->bank_response_code);
		if ($this->isColumnModified(sfAtosCartPeer::COMPLEMENTARY_CODE)) $criteria->add(sfAtosCartPeer::COMPLEMENTARY_CODE, $this->complementary_code);
		if ($this->isColumnModified(sfAtosCartPeer::COMPLEMENTARY_INFO)) $criteria->add(sfAtosCartPeer::COMPLEMENTARY_INFO, $this->complementary_info);
		if ($this->isColumnModified(sfAtosCartPeer::RETURN_CONTEXT)) $criteria->add(sfAtosCartPeer::RETURN_CONTEXT, $this->return_context);
		if ($this->isColumnModified(sfAtosCartPeer::CADDIE)) $criteria->add(sfAtosCartPeer::CADDIE, $this->caddie);
		if ($this->isColumnModified(sfAtosCartPeer::LANGUAGE)) $criteria->add(sfAtosCartPeer::LANGUAGE, $this->language);
		if ($this->isColumnModified(sfAtosCartPeer::CUSTOMER_ID)) $criteria->add(sfAtosCartPeer::CUSTOMER_ID, $this->customer_id);
		if ($this->isColumnModified(sfAtosCartPeer::ORDER_ID)) $criteria->add(sfAtosCartPeer::ORDER_ID, $this->order_id);
		if ($this->isColumnModified(sfAtosCartPeer::CUSTOMER_EMAIL)) $criteria->add(sfAtosCartPeer::CUSTOMER_EMAIL, $this->customer_email);
		if ($this->isColumnModified(sfAtosCartPeer::CUSTOMER_IP_ADDRESS)) $criteria->add(sfAtosCartPeer::CUSTOMER_IP_ADDRESS, $this->customer_ip_address);
		if ($this->isColumnModified(sfAtosCartPeer::CAPTURE_DAY)) $criteria->add(sfAtosCartPeer::CAPTURE_DAY, $this->capture_day);
		if ($this->isColumnModified(sfAtosCartPeer::CAPTURE_MODE)) $criteria->add(sfAtosCartPeer::CAPTURE_MODE, $this->capture_mode);
		if ($this->isColumnModified(sfAtosCartPeer::DATA)) $criteria->add(sfAtosCartPeer::DATA, $this->data);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(sfAtosCartPeer::DATABASE_NAME);

		$criteria->add(sfAtosCartPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of sfAtosCart (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAmount($this->amount);

		$copyObj->setMerchantId($this->merchant_id);

		$copyObj->setMerchantLanguage($this->merchant_language);

		$copyObj->setMerchantCountry($this->merchant_country);

		$copyObj->setTransactionId($this->transaction_id);

		$copyObj->setPaymentMeans($this->payment_means);

		$copyObj->setTransmissionDate($this->transmission_date);

		$copyObj->setPaymentTime($this->payment_time);

		$copyObj->setResponseCode($this->response_code);

		$copyObj->setPaymentCertificate($this->payment_certificate);

		$copyObj->setAuthorisationId($this->authorisation_id);

		$copyObj->setCurrencyCode($this->currency_code);

		$copyObj->setCardNumber($this->card_number);

		$copyObj->setCvvFlag($this->cvv_flag);

		$copyObj->setCvvResponseCode($this->cvv_response_code);

		$copyObj->setBankResponseCode($this->bank_response_code);

		$copyObj->setComplementaryCode($this->complementary_code);

		$copyObj->setComplementaryInfo($this->complementary_info);

		$copyObj->setReturnContext($this->return_context);

		$copyObj->setCaddie($this->caddie);

		$copyObj->setLanguage($this->language);

		$copyObj->setCustomerId($this->customer_id);

		$copyObj->setOrderId($this->order_id);

		$copyObj->setCustomerEmail($this->customer_email);

		$copyObj->setCustomerIpAddress($this->customer_ip_address);

		$copyObj->setCaptureDay($this->capture_day);

		$copyObj->setCaptureMode($this->capture_mode);

		$copyObj->setData($this->data);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     sfAtosCart Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     sfAtosCartPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new sfAtosCartPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasesfAtosCart:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasesfAtosCart::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasesfAtosCart
